package myBrain.visualComponents;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import myBrain.Main;
import myBrain.util.JsonFormat;

/**
 *
 * @author Ayahito0223
 */
public class ResultListPanel extends javax.swing.JPanel {

    /**
     * リストに表示するデータ（タイトルだけ）
     */
    private DefaultListModel<String> listModel;

    /**
     * 検索によって選択されたデータが格納される。
     */
    private ArrayList<JsonFormat> selectedList;

    /**
     * Creates new form resultListPanel
     */
    public ResultListPanel() {
        selectedList = new ArrayList<>();
        listModel = new DefaultListModel<>();
        initComponents();
        searchList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void initList() {
        listModel.clear();
        selectedList.clear();

        ArrayList<JsonFormat> dataList = Main.getMainFrame().getDataList().getDatas();
        for (JsonFormat data : dataList) {
            listModel.addElement(data.getTitle());
            selectedList.add(data);
        }
    }

    private void updateSearchList() {
        initList();
    }

    private void updateSearchList(ArrayList<JsonFormat> dispList) {
        listModel.clear();
        for (JsonFormat data : dispList) {
            listModel.addElement(data.getTitle());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        resultList_btnArea = new javax.swing.JPanel();
        resultList_add = new javax.swing.JButton();
        resultList_del = new javax.swing.JButton();
        resultList_detail = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        searchPanel = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        searchCheck_Title = new javax.swing.JCheckBox();
        searchCheck_tag = new javax.swing.JCheckBox();
        searchCheck_url = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        searchList = new javax.swing.JList<>();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setBackground(new java.awt.Color(220, 220, 220));

        resultList_add.setText("追加");
        resultList_add.setBorderPainted(false);
        resultList_add.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultList_addMouseClicked(evt);
            }
        });

        resultList_del.setText("削除");
        resultList_del.setBorderPainted(false);
        resultList_del.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultList_delMouseClicked(evt);
            }
        });

        resultList_detail.setText("詳細");
        resultList_detail.setBorderPainted(false);
        resultList_detail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultList_detailMouseClicked(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("v1.0");

        javax.swing.GroupLayout resultList_btnAreaLayout = new javax.swing.GroupLayout(resultList_btnArea);
        resultList_btnArea.setLayout(resultList_btnAreaLayout);
        resultList_btnAreaLayout.setHorizontalGroup(
            resultList_btnAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultList_btnAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(resultList_btnAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(resultList_btnAreaLayout.createSequentialGroup()
                        .addGroup(resultList_btnAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resultList_del, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                            .addComponent(resultList_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resultList_detail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        resultList_btnAreaLayout.setVerticalGroup(
            resultList_btnAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultList_btnAreaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resultList_add)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultList_detail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultList_del)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        searchBtn.setText("検索");
        searchBtn.setBorderPainted(false);
        searchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchBtnMouseClicked(evt);
            }
        });

        searchCheck_Title.setText("タイトル");

        searchCheck_tag.setText("タグ");

        searchCheck_url.setText("URL");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchCheck_Title)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchCheck_tag)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchCheck_url)
                        .addGap(0, 410, Short.MAX_VALUE))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(searchField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchBtn)))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchCheck_Title)
                    .addComponent(searchCheck_tag)
                    .addComponent(searchCheck_url))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        searchList.setModel(listModel);
        searchList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(searchList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultList_btnArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultList_btnArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void resultList_addMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultList_addMouseClicked
        // TODO add your handling code here:
        Main.getMainFrame().changeScreen(2);
    }//GEN-LAST:event_resultList_addMouseClicked

    private void resultList_delMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultList_delMouseClicked
        // TODO add your handling code here:
        int delIndex = searchList.getSelectedIndex();
        if (delIndex == -1) {
            Object[] msg = {"リストから項目を選択してください。"};
            JOptionPane.showMessageDialog(this, msg, "Error",
                    JOptionPane.ERROR_MESSAGE);

            return;
        } else {
            int index = selectedList.get(delIndex).getNumber();

            Main.getMainFrame().getDataList().remove(index);
            updateSearchList();
        }
    }//GEN-LAST:event_resultList_delMouseClicked

    private void resultList_detailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultList_detailMouseClicked
        // TODO add your handling code here:
        int detailIndex = searchList.getSelectedIndex();
        Main.getDebugFrame().setSearchListNum(detailIndex);
        if (detailIndex == -1) {
            Object[] msg = {"リストから項目を選択してください。"};
            JOptionPane.showMessageDialog(this, msg, "Error",
                    JOptionPane.ERROR_MESSAGE);

            return;
        } else {
            int index = selectedList.get(detailIndex).getNumber();
            Main.getDebugFrame().setSelectedListNum(index);
            if (Main.getMainFrame().getDetailListPanel().initPanel(index)) {
                Main.getMainFrame().changeScreen(1);
            } else {
                Object[] msg = {"移動出来ませんでした。"};
                JOptionPane.showMessageDialog(this, msg, "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
        Main.getDebugFrame().updateInfo();
    }//GEN-LAST:event_resultList_detailMouseClicked

    private void searchBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBtnMouseClicked
        // TODO add your handling code here:
        selectedList.clear();
        String serchTextOri = searchField.getText();
        String[] serchTextArray = serchTextOri.split(" ", -1);
        ArrayList<JsonFormat> dataList = Main.getMainFrame().getDataList().getDatas();
        boolean[] check = new boolean[dataList.size()];

        if (!searchCheck_Title.isSelected() && !searchCheck_tag.isSelected() && !searchCheck_url.isSelected()) {
            for (int j = 0; j < serchTextArray.length; j++) {
                String serchText = serchTextArray[j];
                //titleチェック
                for (int i = 0; i < dataList.size(); i++) {
                    if (dataList.get(i).getTitle().contains(serchText)) {
                        selectedList.add(dataList.get(i));
                        check[i] = true;
                    }
                }
                //タグチェック
                for (int i = 0; i < dataList.size(); i++) {
                    if (check[i]) {
                        continue;
                    }
                    ArrayList<String> tagCheck = dataList.get(i).getTags();
                    for (String tag : tagCheck) {
                        if (tag.contains(serchText)) {
                            selectedList.add(dataList.get(i));
                            check[i] = true;
                        }
                    }
                }
                //URLチェック
                for (int i = 0; i < dataList.size(); i++) {
                    if (check[i]) {
                        continue;
                    }
                    ArrayList<String> urlCheck = dataList.get(i).getUrls();
                    for (String url : urlCheck) {
                        if (url.contains(serchText)) {
                            selectedList.add(dataList.get(i));
                            check[i] = true;
                        }
                    }
                }
            }
        } else {
            for (int j = 0; j < serchTextArray.length; j++) {
                String serchText = serchTextArray[j];

                if (searchCheck_Title.isSelected()) {
                    for (int i = 0; i < dataList.size(); i++) {
                        if (dataList.get(i).getTitle().contains(serchText)) {
                            selectedList.add(dataList.get(i));
                            check[i] = true;
                        }
                    }
                }
                if (searchCheck_tag.isSelected()) {
                    for (int i = 0; i < dataList.size(); i++) {
                        if (check[i]) {
                            continue;
                        }
                        ArrayList<String> tagCheck = dataList.get(i).getTags();
                        for (String tag : tagCheck) {
                            if (tag.contains(serchText)) {
                                selectedList.add(dataList.get(i));
                                check[i] = true;
                            }
                        }
                    }
                }
                if (searchCheck_url.isSelected()) {
                    for (int i = 0; i < dataList.size(); i++) {
                        if (check[i]) {
                            continue;
                        }
                        ArrayList<String> urlCheck = dataList.get(i).getUrls();
                        for (String url : urlCheck) {
                            if (url.contains(serchText)) {
                                selectedList.add(dataList.get(i));
                                check[i] = true;
                            }
                        }
                    }
                }
            }
        }

        updateSearchList(selectedList);
    }//GEN-LAST:event_searchBtnMouseClicked

    private void searchListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchListMouseClicked
        // TODO add your handling code here:
        JList list = (JList) evt.getSource();
        DefaultListModel model = (DefaultListModel) list.getModel();
        if (evt.getClickCount() == 2) {
            int selectIndex = list.locationToIndex(evt.getPoint());
            Main.getDebugFrame().setSearchListNum(selectIndex);
            try {
                model.get(selectIndex);
            } catch (ArrayIndexOutOfBoundsException e) {
                Object[] msg = {"リストから項目を選択してください。"};
                JOptionPane.showMessageDialog(this, msg, "Error",
                        JOptionPane.ERROR_MESSAGE);

                if (Main.DEBUG) {
                    e.printStackTrace();
                }
                return;
            }
            int index = selectedList.get(selectIndex).getNumber();
            if (Main.getMainFrame().getDetailListPanel().initPanel(index)) {
                Main.getMainFrame().changeScreen(1);
                Main.getDebugFrame().setSelectedListNum(index);
            } else {
                Object[] msg = {"移動出来ませんでした。"};
                JOptionPane.showMessageDialog(this, msg, "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
        Main.getDebugFrame().updateInfo();
    }//GEN-LAST:event_searchListMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton resultList_add;
    private javax.swing.JPanel resultList_btnArea;
    private javax.swing.JButton resultList_del;
    private javax.swing.JButton resultList_detail;
    private javax.swing.JButton searchBtn;
    private javax.swing.JCheckBox searchCheck_Title;
    private javax.swing.JCheckBox searchCheck_tag;
    private javax.swing.JCheckBox searchCheck_url;
    private javax.swing.JTextField searchField;
    private javax.swing.JList<String> searchList;
    private javax.swing.JPanel searchPanel;
    // End of variables declaration//GEN-END:variables
}
